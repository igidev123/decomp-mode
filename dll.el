(defun dll-make-node (value)
  (list value nil nil)) ; (value next prev)
(defun dll-get-value (current)
  (nth 0 current))
(defun dll-next (current)
  (nth 1 current))
(defun dll-prev (current)
  (nth 2 current))

(defun dll-advance (current n)
  (while (< n 0)
    (setf current (dll-prev current))
    (setf n (1+ n)))
  (while (> n 0)
    (setf current (dll-next current))
    (setf n (1- n)))
  current)
(defun dll-set-value (current value)
  (setf (nth 0 current) value))
(defun dll-insert (current value)
  (let* ((next (dll-next current))
         (inserted (setf (nth 1 current) (list value next current))))
    (setf (nth 1 current) inserted)
    (if next
        (setf (nth 2 next) inserted)))
    (dll-next current))
(defun dll-first (current)
  (while (dll-prev current)
    (setq current (dll-prev current))))
(defun dll-last (current)
  (while (dll-next current)
    (setf current (dll-next current)))
  current)
(defun dll-print (current)
  (while current
    (princ (format "%s " (car current)))
    (setf current (dll-next current))))

(defun list-to-dll (source)
  (let* ((result (dll-make-node (car source)))
        (current result))
    (dolist (elem (cdr source))
      (setf current (dll-insert current elem)))
    (dll-insert current nil)
    result))

